{"ast":null,"code":"import _classCallCheck from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/louis/apps/myreads/src/App.js\";\nimport React, { Component } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport BookTable from './BookTable';\nimport SearchBar from './SearchBar'; //import { Route } from 'react-router-dom'\n//import ListBooks from './ListBooks'\n//import ListBkResults from './ListBkResults'\n\nimport './App.css';\n\nvar BooksApp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BooksApp, _Component);\n\n  function BooksApp(props) {\n    var _this;\n\n    _classCallCheck(this, BooksApp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BooksApp).call(this, props));\n\n    _this.searchBook = function (query) {\n      BooksAPI.getAll().then(function (books) {\n        _this.setState(function (books) {\n          return {};\n        });\n      });\n    };\n\n    _this.updateBook = function (book, shelf) {\n      BooksAPI.update(book, shelf).then(function (books) {\n        _this.setState(function (currentState) {\n          return {\n            books: currentState.books.concat([books])\n          };\n        });\n      });\n    };\n\n    _this.state = {\n      /**\n       * TODO: Instead of using this state variable to keep track of which page\n       * we're on, use the URL in the browser's address bar. This will ensure that\n       * users can use the browser's back and forward buttons to navigate between\n       * pages, as well as provide a good URL they can bookmark and share.\n       */\n      query: '',\n      showSearchPage: false,\n      books: [],\n      bkResults: [],\n      showingBooks: [],\n      currentlyReading: [],\n      read: [],\n      wantToRead: []\n    };\n    _this.handleFilterTextChange = _this.handleFilterTextChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(BooksApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      BooksAPI.getAll().then(function (books) {\n        _this2.setState(function () {\n          return {\n            books: books // currentlyReading: books.filter(books => books.shelf === 'currentlyReading'),\n            // read: books.filter(books => books.shelf === 'read'),\n            // wantToRead: books.filter(books => books.shelf === 'wantToRead'),\n\n          };\n        });\n      });\n    } // updateBookShelf = (book, shelf) => {\n    //   BooksAPI.update(book, shelf).then((data) => {\n    //     console.log(data);\n    //   });\n    // }\n\n  }, {\n    key: \"handleFilterTextChange\",\n    value: function handleFilterTextChange(filterText) {\n      this.setState({\n        filterText: filterText\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var books = this.state.books;\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"MyReads\")), React.createElement(SearchBar, {\n        filterText: this.state.filterText,\n        onFilterTextChange: this.handleFilterTextChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }), React.createElement(BookTable, {\n        books: books,\n        onChangeShelf: this.changeShelf,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })))\n      /*  { <Route exact path='/' render={() => (\n         <ListBooks\n           books={this.state.books}\n           onChangeShelf={this.changeShelf}\n         />\n       )} /> }\n        {/*  <Route exact path='/search' render={() => (\n         <ListBkResults\n           books={this.state.books}\n           onChangeShelf={this.changeShelf}\n         />\n       )} />\n      * / }\n       <div className=\"list-books\">\n         <div className=\"list-books-title\">\n           <h1>MyReads</h1>\n         </div>\n         <div className=\"list-books-content\">\n           <div>\n             <div className=\"bookshelf\">\n               <h2 className=\"bookshelf-title\">Currently Reading</h2>\n               {//JSON.stringify(currentlyReading)\n               }\n               <div className=\"bookshelf-books\">\n                 <Route exact path='/' render={() => (\n                   <ListBooks\n                     books={currentlyReading}\n                     onUpdateShelf={this.updateBook}\n                   />\n                 )} />\n               </div>\n             </div>\n             <div className=\"bookshelf\">\n               <h2 className=\"bookshelf-title\">Want to Read</h2>\n               <div className=\"bookshelf-books\">\n                 <Route exact path='/' render={() => (\n                   <ListBooks\n                      books={wantToRead}\n                     onUpdateShelf={this.updateBook}\n                    />\n                 )} />\n               </div>\n             </div>\n             <div className=\"bookshelf\">\n               <h2 className=\"bookshelf-title\">Read</h2>\n               <div className=\"bookshelf-books\">\n                 <Route exact path='/' render={() => (\n                   <ListBooks\n                     onUpdateShelf={this.updateBook}\n                     books={read}\n                   />\n                 )} />\n               </div>\n             </div>\n              <div className=\"bookshelf\">\n               <h2 className=\"bookshelf-title\">Other</h2>\n               <div className=\"bookshelf-books\">\n                 <Route exact path='/' render={() => (\n                   <ListBooks\n                     onUpdateShelf={this.updateBook}\n                     books={books.filter(((c) => {\n                       return c.shelf === \"none\"\n                     }))}\n                    />\n                 )}\n                 />\n               </div>\n             </div>\n            </div>\n         </div>\n       </div>\n        <div className=\"open-search\">\n         <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\n       </div>\n      */\n      ;\n    }\n  }]);\n\n  return BooksApp;\n}(Component);\n\nexport default BooksApp;","map":{"version":3,"sources":["/Users/louis/apps/myreads/src/App.js"],"names":["React","Component","BooksAPI","BookTable","SearchBar","BooksApp","props","searchBook","query","getAll","then","books","setState","updateBook","book","shelf","update","currentState","concat","state","showSearchPage","bkResults","showingBooks","currentlyReading","read","wantToRead","handleFilterTextChange","bind","filterText","changeShelf"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport BookTable from './BookTable'\nimport SearchBar from './SearchBar'\n//import { Route } from 'react-router-dom'\n//import ListBooks from './ListBooks'\n//import ListBkResults from './ListBkResults'\nimport './App.css'\n\nclass BooksApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /**\n       * TODO: Instead of using this state variable to keep track of which page\n       * we're on, use the URL in the browser's address bar. This will ensure that\n       * users can use the browser's back and forward buttons to navigate between\n       * pages, as well as provide a good URL they can bookmark and share.\n       */\n      query: '',\n      showSearchPage: false,\n      books: [],\n      bkResults: [],\n      showingBooks: [],\n      currentlyReading: [],\n      read: [],\n      wantToRead: [],\n    }\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n  }\n  componentDidMount() {\n    BooksAPI.getAll()\n      .then((books) => {\n        this.setState(() => ({\n          books,\n         // currentlyReading: books.filter(books => books.shelf === 'currentlyReading'),\n         // read: books.filter(books => books.shelf === 'read'),\n         // wantToRead: books.filter(books => books.shelf === 'wantToRead'),\n        }))\n      })\n  }\n  // updateBookShelf = (book, shelf) => {\n  //   BooksAPI.update(book, shelf).then((data) => {\n  //     console.log(data);\n  //   });\n  // }\n  handleFilterTextChange(filterText) {\n    this.setState({\n      filterText: filterText\n    });\n  }\n\n  searchBook = (query) => {\n    BooksAPI.getAll()\n      .then((books) => {\n        this.setState((books) => ({\n\n        }))\n      })\n  }\n\n  updateBook = (book, shelf) => {\n    BooksAPI.update(book, shelf)\n      .then((books) => {\n        this.setState((currentState) => ({\n          books: currentState.books.concat([books])\n        }))\n      })\n  }\n\n  render() {\n  const books=this.state.books\n    return (\n      <div className=\"app\">\n        <div className=\"list-books\">\n          <div className=\"list-books-title\">\n            <h1>MyReads</h1>\n          </div>\n        <SearchBar\n          filterText={this.state.filterText}\n          onFilterTextChange={this.handleFilterTextChange}\n        />\n        <BookTable\n          books={books}\n          onChangeShelf={this.changeShelf}\n          \n        />\n        </div>\n      </div>\n\n       /*  { <Route exact path='/' render={() => (\n          <ListBooks\n            books={this.state.books}\n            onChangeShelf={this.changeShelf}\n          />\n        )} /> }\n\n        {/*  <Route exact path='/search' render={() => (\n          <ListBkResults\n            books={this.state.books}\n            onChangeShelf={this.changeShelf}\n          />\n        )} />\n * / }\n        <div className=\"list-books\">\n          <div className=\"list-books-title\">\n            <h1>MyReads</h1>\n          </div>\n          <div className=\"list-books-content\">\n            <div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                {//JSON.stringify(currentlyReading)\n                }\n                <div className=\"bookshelf-books\">\n                  <Route exact path='/' render={() => (\n                    <ListBooks\n                      books={currentlyReading}\n                      onUpdateShelf={this.updateBook}\n                    />\n                  )} />\n                </div>\n              </div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Want to Read</h2>\n                <div className=\"bookshelf-books\">\n                  <Route exact path='/' render={() => (\n                    <ListBooks\n\n                      books={wantToRead}\n                      onUpdateShelf={this.updateBook}\n\n                    />\n                  )} />\n                </div>\n              </div>\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Read</h2>\n                <div className=\"bookshelf-books\">\n                  <Route exact path='/' render={() => (\n                    <ListBooks\n                      onUpdateShelf={this.updateBook}\n                      books={read}\n                    />\n                  )} />\n                </div>\n              </div>\n\n              <div className=\"bookshelf\">\n                <h2 className=\"bookshelf-title\">Other</h2>\n                <div className=\"bookshelf-books\">\n                  <Route exact path='/' render={() => (\n                    <ListBooks\n                      onUpdateShelf={this.updateBook}\n                      books={books.filter(((c) => {\n                        return c.shelf === \"none\"\n                      }))}\n\n                    />\n                  )}\n                  />\n                </div>\n              </div>\n\n            </div>\n          </div>\n        </div>\n\n        <div className=\"open-search\">\n          <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\n        </div>\n*/\n    )}\n\n\n}\n\nexport default BooksApp\n"]},"metadata":{},"sourceType":"module"}