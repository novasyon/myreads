{"ast":null,"code":"import _classCallCheck from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/louis/apps/myreads/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/louis/apps/myreads/src/App.js\";\nimport React, { Component } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport { Route } from 'react-router-dom';\nimport ListBooks from './ListBooks';\nimport ListBkResults from './ListBkResults';\nimport './App.css';\n\nvar BooksApp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BooksApp, _Component);\n\n  function BooksApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BooksApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BooksApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      /**\n       * TODO: Instead of using this state variable to keep track of which page\n       * we're on, use the URL in the browser's address bar. This will ensure that\n       * users can use the browser's back and forward buttons to navigate between\n       * pages, as well as provide a good URL they can bookmark and share.\n       */\n      query: '',\n      showSearchPage: false,\n      books: [],\n      bkread: [],\n      bkWantToRead: [],\n      bkReading: [],\n      bkResults: [],\n      showingBooks: []\n    };\n\n    _this.searchBook = function (query) {\n      BooksAPI.search(query).then(function (bkResults) {\n        _this.setState(function () {\n          return {\n            bkResults: bkResults\n          };\n        });\n      });\n    };\n\n    _this.removeBook = function (books) {\n      _this.setState(function (currentState) {\n        return {\n          books: currentState.books.filter(function (b) {\n            return b.id !== books.id;\n          })\n        };\n      });\n    };\n\n    _this.updateBook = function (book, shelf) {\n      BooksAPI.update(book, shelf).then(function (books) {\n        _this.setState(function (currentState) {\n          return {\n            books: currentState.books.concat([books])\n          };\n        });\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BooksApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      BooksAPI.getAll().then(function (books) {\n        _this2.setState(function () {\n          return {\n            books: books\n          };\n        });\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return true;\n    }\n    /*updateBook = (book, shelf) => {\n      this.setState((currentState) => ({\n        books: currentState.books\n        //filter((c) => {\n        //  return c.id !== contact.id\n       // })\n      }))\n       BooksAPI.update(book, shelf)\n       BooksAPI.update(book, shelf)\n        .then((books) => {\n          this.setState((previousState) => ({\n            books: previousState.books.concat([books]),\n           \n          }))\n        })\n        \n    }*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          query = _this$state.query,\n          books = _this$state.books,\n          showingBooks = _this$state.showingBooks; // let showingBooks = []\n\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.state.showSearchPage ? React.createElement(\"div\", {\n        className: \"search-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"search-books-bar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"close-search\",\n        onClick: function onClick() {\n          return _this3.setState({\n            showSearchPage: false\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Close\"), React.createElement(\"div\", {\n        className: \"search-books-input-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Search by title or author\",\n        value: query,\n        onChange: function onChange(event) {\n          return _this3.updateBook(event.target.value);\n        },\n        books: this.searchBook(this.query),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"search-books-results\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, console.log(\"showingBooks -- \", showingBooks), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Results for [\", this.state.query, \"]: \", showingBooks.length, \" books.\"), React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render() {\n          return React.createElement(ListBooks, {\n            showingBooks: _this3.state.books,\n            onUpdateShelf: _this3.updateBook,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }))) : React.createElement(\"div\", {\n        className: \"list-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"MyReads\")), React.createElement(\"div\", {\n        className: \"list-books-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"bookshelf\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"bookshelf-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Currently Reading\"), React.createElement(\"div\", {\n        className: \"bookshelf-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render() {\n          return React.createElement(ListBooks, {\n            onUpdateShelf: _this3.updateBook,\n            books: _this3.state.books.filter(function (c) {\n              return c.shelf === \"currentlyReading\";\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"bookshelf\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"bookshelf-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Want to Read\"), React.createElement(\"div\", {\n        className: \"bookshelf-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render() {\n          return React.createElement(ListBooks, {\n            onUpdateShelf: _this3.updateBook,\n            books: _this3.state.books.filter(function (c) {\n              return c.shelf === \"wantToRead\";\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"bookshelf\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"bookshelf-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"Read\"), React.createElement(\"div\", {\n        className: \"bookshelf-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        render: function render() {\n          return React.createElement(ListBooks, {\n            onUpdateShelf: _this3.updateBook,\n            books: _this3.state.books.filter(function (c) {\n              return c.shelf === \"read\";\n            }),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"open-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this3.setState({\n            showSearchPage: true\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Add a book\"))));\n    }\n  }]);\n\n  return BooksApp;\n}(Component);\n\nexport default BooksApp;","map":{"version":3,"sources":["/Users/louis/apps/myreads/src/App.js"],"names":["React","Component","BooksAPI","Route","ListBooks","ListBkResults","BooksApp","state","query","showSearchPage","books","bkread","bkWantToRead","bkReading","bkResults","showingBooks","searchBook","search","then","setState","removeBook","currentState","filter","b","id","updateBook","book","shelf","update","concat","getAll","event","target","value","console","log","length","c"],"mappings":";;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAO,WAAP;;IAEMC,Q;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACN;;;;;;AAMAC,MAAAA,KAAK,EAAE,EAPD;AAQNC,MAAAA,cAAc,EAAE,KARV;AASNC,MAAAA,KAAK,EAAE,EATD;AAUNC,MAAAA,MAAM,EAAE,EAVF;AAWNC,MAAAA,YAAY,EAAE,EAXR;AAYNC,MAAAA,SAAS,EAAE,EAZL;AAaNC,MAAAA,SAAS,EAAE,EAbL;AAcNC,MAAAA,YAAY,EAAE;AAdR,K;;UAwBRC,U,GAAa,UAACR,KAAD,EAAW;AACtBN,MAAAA,QAAQ,CAACe,MAAT,CAAgBT,KAAhB,EACGU,IADH,CACQ,UAACJ,SAAD,EAAe;AACnB,cAAKK,QAAL,CAAc;AAAA,iBAAO;AACnBL,YAAAA,SAAS,EAATA;AADmB,WAAP;AAAA,SAAd;AAGD,OALH;AAMD,K;;UAKDM,U,GAAa,UAACV,KAAD,EAAW;AACtB,YAAKS,QAAL,CAAc,UAACE,YAAD;AAAA,eAAmB;AAC/BX,UAAAA,KAAK,EAAEW,YAAY,CAACX,KAAb,CAAmBY,MAAnB,CAA0B,UAACC,CAAD,EAAO;AACtC,mBAAOA,CAAC,CAACC,EAAF,KAASd,KAAK,CAACc,EAAtB;AACD,WAFM;AADwB,SAAnB;AAAA,OAAd;AAKD,K;;UAyBDC,U,GAAa,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC5BzB,MAAAA,QAAQ,CAAC0B,MAAT,CAAgBF,IAAhB,EAAsBC,KAAtB,EACCT,IADD,CACM,UAACR,KAAD,EAAW;AACf,cAAKS,QAAL,CAAc,UAACE,YAAD;AAAA,iBAAmB;AAC/BX,YAAAA,KAAK,EAAEW,YAAY,CAACX,KAAb,CAAmBmB,MAAnB,CAA0B,CAACnB,KAAD,CAA1B;AADwB,WAAnB;AAAA,SAAd;AAGD,OALD;AAMD,K;;;;;;;wCA1DmB;AAAA;;AAClBR,MAAAA,QAAQ,CAAC4B,MAAT,GACGZ,IADH,CACQ,UAACR,KAAD,EAAW;AACf,QAAA,MAAI,CAACS,QAAL,CAAc;AAAA,iBAAO;AACnBT,YAAAA,KAAK,EAALA;AADmB,WAAP;AAAA,SAAd;AAGD,OALH;AAMD;;;4CAqBsB;AACrB,aAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;;;;;;;6BA6BS;AAAA;;AAAA,wBAC8B,KAAKH,KADnC;AAAA,UACDC,KADC,eACDA,KADC;AAAA,UACOE,KADP,eACOA,KADP;AAAA,UACcK,YADd,eACcA,YADd,EAGR;;AAEC,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKR,KAAL,CAAWE,cAAX,GACC;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,SAAS,EAAC,cAAlB;AAAiC,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACU,QAAL,CAAc;AAAEV,YAAAA,cAAc,EAAE;AAAlB,WAAd,CAAN;AAAA,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAK,QAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SASE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,2BAA/B;AACE,QAAA,KAAK,EAAED,KADT;AAEE,QAAA,QAAQ,EAAE,kBAACuB,KAAD;AAAA,iBAAW,MAAI,CAACN,UAAL,CAAgBM,KAAK,CAACC,MAAN,CAAaC,KAA7B,CAAX;AAAA,SAFZ;AAGE,QAAA,KAAK,EAAE,KAAKjB,UAAL,CAAgB,KAAKR,KAArB,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CAFF,CADF,EAqBE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG0B,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCpB,YAAhC,CADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAoB,KAAKR,KAAL,CAAWC,KAA/B,SAAyCO,YAAY,CAACqB,MAAtD,YAFF,EAGE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,MAAM,EAAE;AAAA,iBAE5B,oBAAC,SAAD;AACE,YAAA,YAAY,EAAE,MAAI,CAAC7B,KAAL,CAAWG,KAD3B;AAEE,YAAA,aAAa,EAAE,MAAI,CAACe,UAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAF4B;AAAA,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,CArBF,CADD,GAmCG;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,EAEE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,MAAM,EAAE;AAAA,iBAC5B,oBAAC,SAAD;AACA,YAAA,aAAa,EAAE,MAAI,CAACA,UADpB;AAEE,YAAA,KAAK,EAAE,MAAI,CAAClB,KAAL,CAAWG,KAAX,CAAiBY,MAAjB,CAAyB,UAACe,CAAD,EAAO;AACrC,qBAAOA,CAAC,CAACV,KAAF,KAAY,kBAAnB;AACD,aAFM,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAD4B;AAAA,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CADF,EAgBE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,MAAM,EAAE;AAAA,iBAC5B,oBAAC,SAAD;AACA,YAAA,aAAa,EAAE,MAAI,CAACF,UADpB;AAEE,YAAA,KAAK,EAAE,MAAI,CAAClB,KAAL,CAAWG,KAAX,CAAiBY,MAAjB,CAAyB,UAACe,CAAD,EAAO;AACrC,qBAAOA,CAAC,CAACV,KAAF,KAAY,YAAnB;AACD,aAFM,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAD4B;AAAA,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CAhBF,EA8BE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,iBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,MAAM,EAAE;AAAA,iBAC5B,oBAAC,SAAD;AACA,YAAA,aAAa,EAAE,MAAI,CAACF,UADpB;AAEE,YAAA,KAAK,EAAE,MAAI,CAAClB,KAAL,CAAWG,KAAX,CAAiBY,MAAjB,CAAyB,UAACe,CAAD,EAAO;AACrC,qBAAOA,CAAC,CAACV,KAAF,KAAY,MAAnB;AACD,aAFM,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAD4B;AAAA,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,CA9BF,CADF,CAJF,EAmDE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACR,QAAL,CAAc;AAAEV,YAAAA,cAAc,EAAE;AAAlB,WAAd,CAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CAnDF,CApCN,CADF;AA+FD;;;;EAlLoBR,S;;AAqLvB,eAAeK,QAAf","sourcesContent":["\nimport React, { Component } from 'react'\nimport * as BooksAPI from './BooksAPI'\nimport { Route } from 'react-router-dom'\nimport ListBooks from './ListBooks'\nimport ListBkResults from './ListBkResults'\nimport './App.css'\n\nclass BooksApp extends Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    query: '',\n    showSearchPage: false,\n    books: [],\n    bkread: [],\n    bkWantToRead: [],\n    bkReading: [],\n    bkResults: [],\n    showingBooks: []\n  }\n  componentDidMount() {\n    BooksAPI.getAll()\n      .then((books) => {\n        this.setState(() => ({\n          books\n        }))\n      })\n  }\n  searchBook = (query) => {\n    BooksAPI.search(query)\n      .then((bkResults) => {\n        this.setState(() => ({\n          bkResults\n        }))\n      })\n  }\n  //componentDidMount() {\n  //  this.searchBook(this.state.query)\n  //}\n\n  removeBook = (books) => {\n    this.setState((currentState) => ({\n      books: currentState.books.filter((b) => {\n        return b.id !== books.id\n      })\n    }))\n  }\n\n  shouldComponentUpdate(){\n    return true\n  }\n\n  /*updateBook = (book, shelf) => {\n    this.setState((currentState) => ({\n      books: currentState.books\n      //filter((c) => {\n      //  return c.id !== contact.id\n     // })\n    }))\n\n    BooksAPI.update(book, shelf)\n\n    BooksAPI.update(book, shelf)\n      .then((books) => {\n        this.setState((previousState) => ({\n          books: previousState.books.concat([books]),\n         \n        }))\n      })\n      \n  }*/\n  updateBook = (book, shelf) => {\n    BooksAPI.update(book, shelf)\n    .then((books) => {\n      this.setState((currentState) => ({\n        books: currentState.books.concat([books])\n      }))\n    })\n  }\n\n\n  render() {\n    let { query , books, showingBooks} = this.state\n\n   // let showingBooks = []\n\n    return (\n      <div className=\"app\">\n        {this.state.showSearchPage ? (\n          <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n              <button className=\"close-search\" onClick={() => this.setState({ showSearchPage: false })}>Close</button>\n              <div className=\"search-books-input-wrapper\">\n                {/*\n                  NOTES: The search from BooksAPI is limited to a particular set of search terms.\n                  You can find these search terms here:\n                  https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\n\n                  However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\n                  you don't find a specific author or title. Every search is limited by search terms.\n                */}\n                <input type=\"text\" placeholder=\"Search by title or author\"\n                  value={query}\n                  onChange={(event) => this.updateBook(event.target.value)}\n                  books={this.searchBook(this.query)}\n                />\n              </div>\n            </div>\n\n\n            <div className=\"search-books-results\">\n              {console.log(\"showingBooks -- \", showingBooks)}\n              <span>Results for [{this.state.query}]: {showingBooks.length} books.</span>\n              <Route exact path='/' render={() => (\n\n                <ListBooks\n                  showingBooks={this.state.books}\n                  onUpdateShelf={this.updateBook}\n                />\n              )} />\n            </div>\n          </div>\n        ) : (\n            <div className=\"list-books\">\n              <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n              </div>\n              <div className=\"list-books-content\">\n                <div>\n                  <div className=\"bookshelf\">\n                    <h2 className=\"bookshelf-title\">Currently Reading</h2>\n                    <div className=\"bookshelf-books\">\n                      <Route exact path='/' render={() => (\n                        <ListBooks\n                        onUpdateShelf={this.updateBook}\n                          books={this.state.books.filter(((c) => {\n                            return c.shelf === \"currentlyReading\"\n                          }))}\n                          \n                        />\n                      )} />\n\n                    </div>\n                  </div>\n                  <div className=\"bookshelf\">\n                    <h2 className=\"bookshelf-title\">Want to Read</h2>\n                    <div className=\"bookshelf-books\">\n                      <Route exact path='/' render={() => (\n                        <ListBooks\n                        onUpdateShelf={this.updateBook}\n                          books={this.state.books.filter(((c) => {\n                            return c.shelf === \"wantToRead\"\n                          }))}\n                          \n                        />\n                      )} />\n                    </div>\n                  </div>\n                  <div className=\"bookshelf\">\n                    <h2 className=\"bookshelf-title\">Read</h2>\n                    <div className=\"bookshelf-books\">\n                      <Route exact path='/' render={() => (\n                        <ListBooks\n                        onUpdateShelf={this.updateBook}\n                          books={this.state.books.filter(((c) => {\n                            return c.shelf === \"read\"\n                          }))}\n                          \n                        />\n                      )} />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"open-search\">\n                <button onClick={() => this.setState({ showSearchPage: true })}>Add a book</button>\n              </div>\n            </div>\n          )}\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n"]},"metadata":{},"sourceType":"module"}